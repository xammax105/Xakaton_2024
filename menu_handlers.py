
from aiogram import Bot, Router, types, F
from aiogram.types import InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

import keyboard as kb
from states import *
import sqlite3
import os
import logging
from config import TOKEN, admin_num
import functions as f

# –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
con = sqlite3.connect(r'bot_database.db')
cur = con.cursor()

# —Ä–æ—É—Ç–µ—Ä
router = Router()
bot = Bot(token=TOKEN)


@router.message(F.text.lower() == '–º–µ–Ω—éüìÑ')
async def user(message: types.Message):
    await bot.send_message(message.from_user.id, f"–ú–µ–Ω—é: ", reply_markup=kb.menu_keyboard)


@router.message(F.text.lower() == '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ü•¥')
async def history(message: types.Message):
    photo_maks =  await bot.get_user_profile_photos(989808944, limit=10)
    photo_file_maks = photo_maks.photos[0][-1].file_id
    photo_den = await bot.get_user_profile_photos(1662425966, limit=10)
    photo_file_den = photo_den.photos[0][-1].file_id
    photo_gosha = await bot.get_user_profile_photos(666366306, limit=10)
    photo_file_gosha = photo_gosha.photos[0][-1].file_id

    await bot.send_photo(chat_id=message.from_user.id, photo=photo_file_maks,caption=f"<b>–ú–∞–∫—Å–∏–º –ö–∞–Ω–∏—á–µ–≤</b>\n18 "
                                                                                     f"–≥–æ–¥–∏–∫–æ–≤\n—Å—Ç—É–¥–µ–Ω—Ç –ü–ö "
                                                                                     f"–ë–ì–¢–£\n–Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã "
                                                                                     f"<code>2202201367764954</code>",
                         parse_mode='HTML')
    await bot.send_photo(chat_id=message.from_user.id, photo=photo_file_den,caption=f"<b>–î–µ–Ω–∏—Å –ê—Ä–∞–ø–æ–≤</b>\n18 "
                                                                                    f"–≥–æ–¥–∏–∫–æ–≤\n—Å—Ç—É–¥–µ–Ω—Ç –ü–ö –ë–ì–¢–£\n–Ω–æ–º–µ—Ä"
                                                                                    f" –∫–∞—Ä—Ç—ã "
                                                                                    f"<code>2202201367764954</code>",
                         parse_mode='HTML')
    await bot.send_photo(chat_id=message.from_user.id, photo=photo_file_gosha,caption=f"<b>–ì–µ–æ—Ä–≥–∏–π –ë–µ—Ä–∏—à–≤–∏–ª–∏</b>\n18 "
                                                                                      f"–≥–æ–¥–∏–∫–æ–≤\n—Å—Ç—É–¥–µ–Ω—Ç –ü–ö "
                                                                                      f"–ë–ì–¢–£\n–Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã "
                                                                                      f"<code>2200701014139775</code>",
                         parse_mode='HTML')


@router.callback_query(F.data == 'admin')
async def admin(message: types.Message, state: FSMContext):
    if message.from_user.id in admin_num:
        await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: üîê")
        # –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç —Å –ø–∞—Ä–æ–ª–µ–º
        await state.set_state(RasStates.waiting_for_password)
    else:
        await bot.send_message(message.from_user.id, "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å <b>–∞–¥–º–∏–Ω–æ–º</b>ü§î", parse_mode='HTML')

    @router.message(RasStates.waiting_for_password)
    async def process_password(message: types.Message, state: FSMContext):
        password = message.text
        if password == "123":  # –ó–∞–º–µ–Ω–∏—Ç–µ "your_password" –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å
            await bot.send_message(message.from_user.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—åüí™",
                                   reply_markup=kb.get_admin_keyboard())
        else:
            await bot.send_message(message.from_user.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—åüîí")
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é user(message)
            await user(message)
        # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è
        await state.clear()


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª—å
@router.callback_query(F.data == 'profile')
async def profile_command(message: types.Message):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    query = """SELECT answers FROM Users WHERE user_id = ?"""
    cur.execute(query, (message.from_user.id,))
    answers_count = cur.fetchone()[0]

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Ç–≤–µ—Ç–æ–≤
    if answers_count < 5:
        answers_rank = "üßë –ù–æ–≤–∏—á–æ–∫"
    elif 5 <= answers_count < 10:
        answers_rank = "üßê –ó–Ω–∞—Ç–æ–∫"
    elif 10 <= answers_count < 20:
        answers_rank = "üë®üèº‚Äçüéì –ì—É—Ä—É"
    else:
        answers_rank = "üåå –í—ã—Å—à–∏–π —Ä–∞–∑—É–º"

    if answers_count is None:
        answers_rank = "üßë –ù–æ–≤–∏—á–æ–∫"

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    query1 = """SELECT instructions FROM Users WHERE user_id = ?"""
    cur.execute(query1, (message.from_user.id,))
    instr_count = cur.fetchone()[0]

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º
    if instr_count < 5:
        inst_rank = "üßë –£—á–µ–Ω–∏–∫"
    elif 5 <= instr_count < 10:
        inst_rank = "üßê –ü–æ–º–æ—â–Ω–∏–∫"
    elif 10 <= instr_count < 20:
        inst_rank = "üë®üèº‚Äçüéì –ú—ã—Å–ª–∏—Ç–µ–ª—å"
    else:
        inst_rank = "üåå –ì–µ–Ω–∏–π"

    if instr_count is None:
        inst_rank = "üßë –£—á–µ–Ω–∏–∫"

    try:
        photos = await bot.get_user_profile_photos(message.from_user.id, limit=10)
        photo_file = photos.photos[0][-1].file_id
        await bot.send_photo(message.from_user.id, photo_file, caption=f'üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n'
                                                                       f'–ò–º—è: {message.from_user.first_name}\n'
                                                                       f'–Æ–∑–µ—Ä–Ω–µ–π–º: @{message.from_user.username}\n\n'
                                                                       f'üåü –†–∞–Ω–≥ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π: {inst_rank}\n'
                                                                       f'–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–π: {instr_count}\n\n'
                                                                       f'üåü –†–∞–Ω–≥ –æ—Ç–≤–µ—Ç–æ–≤: {answers_rank}\n'
                                                                       f'–û—Ç–≤–µ—Ç–æ–≤: {answers_count}',
                             reply_markup=kb.get_profile_kb(message.from_user.id)
                             )

    except Exception as e:
        print(e)
        await bot.send_message(message.from_user.id, f'üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n'
                                                     f'–ò–º—è: {message.from_user.first_name}\n'
                                                     f'–Æ–∑–µ—Ä–Ω–µ–π–º: @{message.from_user.username}\n\n'
                                                     f'üåü –†–∞–Ω–≥ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π: {inst_rank}\n'
                                                     f'–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–π: {instr_count}\n\n'
                                                     f'üåü –†–∞–Ω–≥ –æ—Ç–≤–µ—Ç–æ–≤: {answers_rank}\n'
                                                     f'–û—Ç–≤–µ—Ç–æ–≤: {answers_count}',
                               reply_markup=kb.get_profile_kb(message.from_user.id)
                               )


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞—à —Ç–æ–ø
@router.callback_query(F.data == 'top')
async def Top(callback_query: types.CallbackQuery):
    # –±–µ—Ä–µ–º —Ç–æ–ø –ø–æ –∏–Ω—Ç—Å—Ä—É–∫—Ü–∏—è–º
    users_instructions = f.get_users_instructions_count(cur)
    users_answers = f.get_users_answers_count(cur)

    # —Ç–æ–ø –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º
    inst_keyboard = InlineKeyboardBuilder()
    for user_id, num_instructions in users_instructions:
        user = await bot.get_chat(user_id)
        username = user.username
        button = types.InlineKeyboardButton(text=f"@{username} - {num_instructions} –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π",
                                            callback_data=f"user_{user_id}")
        inst_keyboard.row(button)

    # —Ç–æ–ø –ø–æ –æ—Ç–≤–µ—Ç–∞–º
    answ_keyboard = InlineKeyboardBuilder()
    for user_id, num_answers in users_answers:
        user = await bot.get_chat(user_id)
        username = user.username
        button = types.InlineKeyboardButton(text=f"@{username} - {num_answers} –æ—Ç–≤–µ—Ç–æ–≤",
                                            callback_data=f"user_{user_id}")
        answ_keyboard.row(button)

    await bot.send_message(callback_query.message.chat.id,
                           "üèÜ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º:",
                           reply_markup=inst_keyboard.as_markup())
    await bot.send_message(callback_query.message.chat.id,
                           "üèÜ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ—Ç–≤–µ—Ç–∞–º:",
                           reply_markup=answ_keyboard.as_markup())


# –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ—É –ø–æ —é–∑–µ—Ä—É
@router.callback_query(lambda a: a.data.startswith('user_'))
async def show_user_info(callback_query: types.CallbackQuery):
    user_id = callback_query.data.split('_')[1]
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    query = """SELECT answers FROM Users WHERE user_id = ?"""
    cur.execute(query, (user_id,))
    answers_count = cur.fetchone()[0]

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Ç–≤–µ—Ç–æ–≤
    if answers_count < 5:
        answers_rank = "üßë –ù–æ–≤–∏—á–æ–∫"
    elif 5 <= answers_count < 10:
        answers_rank = "üßê –ó–Ω–∞—Ç–æ–∫"
    elif 10 <= answers_count < 20:
        answers_rank = "üë®üèº‚Äçüéì –ì—É—Ä—É"
    else:
        answers_rank = "üåå –í—ã—Å—à–∏–π —Ä–∞–∑—É–º"

    if answers_count is None:
        answers_rank = "üßë –ù–æ–≤–∏—á–æ–∫"

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    query1 = """SELECT instructions FROM Users WHERE user_id = ?"""
    cur.execute(query1, (user_id,))
    instr_count = cur.fetchone()[0]

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º
    if instr_count < 5:
        inst_rank = "üßë –£—á–µ–Ω–∏–∫"
    elif 5 <= instr_count < 10:
        inst_rank = "üßê –ü–æ–º–æ—â–Ω–∏–∫"
    elif 10 <= instr_count < 20:
        inst_rank = "üë®üèº‚Äçüéì –ú—ã—Å–ª–∏—Ç–µ–ª—å"
    else:
        inst_rank = "üåå –ì–µ–Ω–∏–π"

    if instr_count is None:
        inst_rank = "üßë –£—á–µ–Ω–∏–∫"
    try:
        # –≤—ã—Ç—è–≥–∏–≤–∞–µ–º –∏–º—è –∏ —é–∑–µ—Ä–Ω–µ–π–º
        user = await bot.get_chat(user_id)
        user_first_name = user.first_name
        username = user.username

        # –≤—ã—Ç—è–≥–∏–≤–∞–µ–º —Å—á–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
        cur.execute(f"SELECT COUNT(ID) + 1 AS num_instructions FROM Instructions WHERE author_id = {user_id};")
        author_instr = cur.fetchone()[0]

        # –≤—ã—Ç—è–≥–∏–≤–∞–µ–º —Å—á–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤
        cur.execute(f"SELECT COUNT(ID) AS num_answers FROM Answers WHERE author = {user_id};")
        author_answ = cur.fetchone()[0]

        # # –≤—ã—Ç—è–≥–∏–≤–∞–µ–º —Ä–∞–Ω–≥–∏
        # cur.execute(f"""
        #     SELECT Ranks.name
        #     FROM Users
        #     LEFT JOIN Ranks ON Users.instructions = Ranks.id
        #     WHERE Users.user_id = {user_id}
        # """)
        # instr_rank = cur.fetchone()[0]
        #
        # cur.execute(f"""
        #             SELECT Ranks.name
        #             FROM Users
        #             LEFT JOIN Ranks ON Users.answers = Ranks.id
        #             WHERE Users.user_id = {user_id}
        #         """)
        # answ_rank = cur.fetchone()[0]
        # –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å —Ä–∞–Ω–≥–∏ –∏ –ø—Ä–æ—á—É—é —Ö—É–π–Ω—é
        # –≤—ã–≤–æ–¥–∏–º
        await bot.send_message(callback_query.message.chat.id, f"üë§ –ê–≤—Ç–æ—Ä: {user_first_name}\n"
                                                               f"@{username}\n"
                                                               f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–π: {author_instr}\n"
                                                               f"–û—Ç–≤–µ—Ç–æ–≤: {author_answ}\n"
                                                               f"üåü –†–∞–Ω–≥ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π: {inst_rank}\n"
                                                               f"üåü –†–∞–Ω–≥ –æ—Ç–≤–µ—Ç–æ–≤: {answers_rank}\n")
    except Exception as e:
        print(e)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
@router.callback_query(F.data == 'instructions')
async def instructions(message: types.Message):
    await bot.send_message(message.from_user.id, f"üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", reply_markup=kb.keyboard_inst)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Ç–µ–≥–∏
@router.callback_query(F.data == 'tags')
async def tags(message: types.Message):
    tags_keyboard = InlineKeyboardBuilder()
    tags = f.get_hashtags(cur)
    for tag in tags:
        button = types.InlineKeyboardButton(text=f"#{tag}", callback_data=f"subscribe_tag_{tag}")
        tags_keyboard.add(button)
    tags_keyboard.adjust(2)
    await bot.send_message(message.from_user.id, f"üì© –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è:",
                           reply_markup=tags_keyboard.as_markup())


# –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–µ–≥
@router.callback_query(lambda a: a.data.startswith("subscribe_tag_"))
async def subscribe_tag(callback_query: types.CallbackQuery):
    # –±–µ—Ä–µ–º —Ç–µ–≥
    tag = callback_query.data.split("_")[2]

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    cur.execute(
        f"select exists (select 1 from Subscribes where user = {callback_query.from_user.id} and tags = '{tag}');")
    is_subscribed = cur.fetchone()[0]

    if is_subscribed == 0:
        # –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —ç—Ç–æ—Ç —Ç–µ–≥
        # –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É –ø–æ–¥–ø–∏—Å–æ–∫
        cur.execute(f"INSERT INTO Subscribes (user, tags) VALUES ({callback_query.from_user.id}, '{tag}')")
        con.commit()
        await callback_query.answer(f"‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ç–µ–≥ {tag}!")
    elif is_subscribed == 1:
        # –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω
        await callback_query.answer(f"‚úÖ –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç —Ç–µ–≥")


@router.callback_query(lambda a: a.data == 'search')
async def search_for_tags(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, "üîé –í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å—Ç–∞—Ç—å–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –µ–≥–æ:")
    await state.set_state(RasStates.waiting_for_tag_search)

    @router.message(RasStates.waiting_for_tag_search)
    async def search_tags(message: types.Message, state: FSMContext):
        tag = message.text

        if tag[0] == "#":
            tag = tag[1:]

        cur.execute(f"SELECT * FROM Instructions WHERE tags LIKE '%{tag}%' AND is_active = 1")
        res = cur.fetchall()

        # –ò—â–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ç–µ–≥—É
        instructions = res

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if instructions:
            for instruction in instructions:
                answer = [
                    [
                        types.InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{instruction[0]}"),
                        types.InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–≤–µ—Ç—ã", callback_data="viewAnswer")
                    ],
                    [types.InlineKeyboardButton(text="–û—Ç–¥–∞—Ç—å –≥–æ–ª–æ—Å", callback_data=f"voteQuestion_{instruction[0]}")]
                ]

                keyboard_answer = types.InlineKeyboardMarkup(inline_keyboard=answer, resize_keyboard=True)
                await message.reply(f"–ù–∞–π–¥–µ–Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
                                    f"–ù–∞–∑–≤–∞–Ω–∏–µ: {instruction[1]}\n"
                                    f"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {instruction[2]}\n"
                                    f"–ê–≤—Ç–æ—Ä: @{instruction[4]}", reply_markup=keyboard_answer)
        else:
            await message.reply("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        await state.clear()