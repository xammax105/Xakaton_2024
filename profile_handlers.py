from aiogram import Bot, Router, types, F
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

import keyboard as kb
from states import *
import sqlite3
import os
import logging
from config import TOKEN
import functions as f

# –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
con = sqlite3.connect(r'bot_database.db')
cur = con.cursor()

# —Ä–æ—É—Ç–µ—Ä
router = Router()
bot = Bot(token=TOKEN)


# –≤—ã–≤–æ–¥ —Å–≤–æ–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
@router.callback_query(lambda a: a.data == 'edit_ins_ans')
async def select_edit(callback_query: types.CallbackQuery):
    men_kb = [
        [
            types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –û—Ç–≤–µ—Ç ‚úèÔ∏è', callback_data='More'),
            types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—é ‚úçÔ∏è', callback_data='editinstr'),
        ]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=men_kb,
                                          resize_keyboard=True,
                                          input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
                                          )
    await bot.send_message(callback_query.from_user.id, f"–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? üõ†Ô∏è", reply_markup=keyboard)


@router.callback_query(lambda a: a.data == 'editinstr')
async def process_edit_answer_callback(callback_query: types.CallbackQuery, state: FSMContext):
    offset = int(callback_query.data.split('_')[-1]) if '_' in callback_query.data else 0
    sql_query = f"SELECT * FROM Instructions WHERE author_id = {callback_query.from_user.id}"
    cur.execute(sql_query)
    answers = cur.fetchall()
    if offset < len(answers):
        answer = answers[offset]
        idd = answer[0]
        print(idd)
        answer_title = answer[1]
        answer_text = answer[2]

        more_kb = [
            [
                types.InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data=f'EditInsrtact_{idd}'),
                types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å', callback_data=f'Delete_instr_{idd}'),
                types.InlineKeyboardButton(text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data=f'skipe_{offset}')
            ]
        ]
        upd_answer = types.InlineKeyboardMarkup(inline_keyboard=more_kb)

        if type(answer_text) == int:
            await bot.copy_message(callback_query.from_user.id, from_chat_id=callback_query.from_user.id,
                                   message_id=answer_text, reply_markup=upd_answer)
        else:
            await bot.send_message(callback_query.from_user.id,
                                   f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {answer_title}\n–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {answer_text}",
                                   reply_markup=upd_answer)

        new_offset = offset + 1
        if new_offset < len(answers):
            await bot.answer_callback_query(callback_query.id,
                                            f"–°–ª–µ–¥—É—é—â–∏–π –æ—Ç–≤–µ—Ç ({new_offset + 1}/{len(answers)})")

    else:
        await bot.send_message(callback_query.from_user.id, "–í—Å–µ –æ—Ç–≤–µ—Ç—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã.")

    @router.callback_query(F.data.startswith('skipe'))
    async def process_skip_callback(callback_query: types.CallbackQuery):
        offset = int(callback_query.data.split('_')[-1])

        sql_query = f"SELECT * FROM Instructions WHERE author_id = {callback_query.from_user.id}"
        cur.execute(sql_query)
        answers = cur.fetchall()

        if offset < len(answers):
            # Skip to the next answer
            answer = answers[offset]
            idd = answer[0]
            answer_title = answer[1]
            answer_text = answer[2]

            more_kb = [
                [
                    types.InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data=f'EditAnswer_{idd}'),
                    types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å', callback_data=f'DeleteAnswer_{idd}'),
                    types.InlineKeyboardButton(text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data=f'skiped_{offset + 1}')
                ]
            ]
            upd_answer = types.InlineKeyboardMarkup(inline_keyboard=more_kb)

            if answer_text.isdigit():
                await bot.copy_message(callback_query.from_user.id, from_chat_id=callback_query.from_user.id,
                                       message_id=answer_text, reply_markup=upd_answer)
            else:
                await bot.send_message(callback_query.from_user.id,
                                       f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {answer_title}\n–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {answer_text}",
                                       reply_markup=upd_answer)

            await bot.answer_callback_query(callback_query.id, "–ü—Ä–æ–ø—É—â–µ–Ω–æ\n–°–ª–µ–¥—É—é—â–∏–π –æ—Ç–≤–µ—Ç")
        else:
            await bot.send_message(callback_query.from_user.id, "–í—Å–µ –æ—Ç–≤–µ—Ç—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã.")


@router.callback_query(lambda c: c.data.startswith ('EditInsrtact'))
async def process_edit_answer_callback(callback_query: types.CallbackQuery, state: FSMContext):
    cont_1 = callback_query.data.split('_')[1]

    ans_id = int(cont_1)
    await state.update_data(ans_id=ans_id)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏:")
    await state.set_state(RasStates.waiting_for_new_instract)
@router.message(RasStates.waiting_for_new_instract)
async def process_new_answer_content(message: types.Message, state: FSMContext):
    cont_1 = message.text
    if cont_1 is None:
        cont_1 = message.message_id
        print(cont_1, "33300005555")
    else:
        cont_1 = message.text
        print(cont_1)
    ans_id = (await state.get_data())['ans_id']
    print(cont_1, "–û–¢–í–ï–¢")
    print(ans_id, "AUDIiiiii")
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ Answers —Å –Ω–æ–≤—ã–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º is_active –Ω–∞ 0
    cur.execute("UPDATE Instructions SET content = ?, is_active = 0 WHERE id = ?", (cont_1, ans_id))
    con.commit()
    await message.answer("–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –í–∞–º –ø—Ä–∏–¥–µ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è")

    await state.clear()


@router.callback_query(lambda c: c.data.startswith('Delete_instr'))
async def process_edit_answer_callback(callback_query: types.CallbackQuery):
    cont_1 = callback_query.data.split('_')[2]

    ans_id = int(cont_1)
    cur.execute("DELETE FROM Instructions WHERE ID = ?", (ans_id,))
    con.commit()
    cur.execute("Delete From InstructionsVotes WHERE instruction_id = ?", (ans_id,))
    con.commit()
    await bot.send_message(callback_query.from_user.id, "–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ")




# –≤—ã–≤–æ–¥ —Å–≤–æ–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
@router.callback_query(F.data == 'More')
async def edit_my_answers(callback_query: types.CallbackQuery):
    offset = int(callback_query.data.split('_')[-1]) if '_' in callback_query.data else 0

    sql_query = f"SELECT * FROM Answers WHERE author = {callback_query.from_user.id}"
    cur.execute(sql_query)
    answers = cur.fetchall()

    if offset < len(answers):
        answer = answers[offset]
        idd = answer[0]
        answer_text = answer[1]

        more_kb = [
            [
                types.InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data=f'EditAnswer_{idd}'),
                types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å', callback_data=f'DeleteAnswer_{idd}'),
                types.InlineKeyboardButton(text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data=f'skiped_{offset + 1}')
            ]
        ]
        upd_answer = types.InlineKeyboardMarkup(inline_keyboard=more_kb)

        if type(answer_text) == int:
            await bot.copy_message(callback_query.from_user.id, from_chat_id=callback_query.from_user.id,
                                   message_id=answer_text, reply_markup=upd_answer)
        else:
            await bot.send_message(callback_query.from_user.id,
                                   f"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {answer_text}",
                                   reply_markup=upd_answer)

        new_offset = offset + 1
        if new_offset < len(answers):
            await bot.answer_callback_query(callback_query.id,
                                            f"–°–ª–µ–¥—É—é—â–∏–π –æ—Ç–≤–µ—Ç ({new_offset + 1}/{len(answers)})")

    else:
        await bot.send_message(callback_query.from_user.id, "–í—Å–µ –æ—Ç–≤–µ—Ç—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã.")

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞

    @router.callback_query(lambda a: a.data.startswith('EditAnswer_'))
    async def process_edit_answer_callback(callback_query: types.CallbackQuery, state: FSMContext):
        cont_1 = callback_query.data.split('_')[1]

        ans_id = int(cont_1)
        await state.update_data(ans_id=ans_id)

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞
        await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞:")
        await state.set_state(RasStates.waiting_for_new_answer)

    @router.message(RasStates.waiting_for_new_answer)
    async def process_new_answer_content(message: types.Message, state: FSMContext):
        cont_1 = message.text

        if cont_1 is None:
            cont_1 = message.message_id
            print(cont_1, "33300005555")
        else:
            cont_1 = message.text
            print(cont_1)

        ans_id = (await state.get_data())['ans_id']
        print(cont_1, "–û–¢–í–ï–¢")
        print(ans_id, "AUDIiiiii")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ Answers —Å –Ω–æ–≤—ã–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º is_active –Ω–∞ 0
        cur.execute("UPDATE Answers SET content = ?, is_active = 0 WHERE id = ?", (cont_1, ans_id))
        con.commit()
        await message.answer(
            "–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω. –û—Ç–ø—Ä–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –í–∞–º –ø—Ä–∏–¥–µ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è")

        await state.clear()

    @router.callback_query(F.data.startswith('skiped'))
    async def process_skip_callback(callback_query: types.CallbackQuery):
        offset = int(callback_query.data.split('_')[-1])

        sql_query = f"SELECT * FROM Answers WHERE author = {callback_query.from_user.id}"
        cur.execute(sql_query)
        answers = cur.fetchall()

        if offset < len(answers):
            # Skip to the next answer
            answer = answers[offset]
            idd = answer[0]
            answer_text = answer[1]

            more_kb = [
                [
                    types.InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data=f'EditAnswer_{idd}'),
                    types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å', callback_data=f'DeleteAnswer_{idd}'),
                    types.InlineKeyboardButton(text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data=f'skiped_{offset + 1}')
                ]
            ]
            upd_answer = types.InlineKeyboardMarkup(inline_keyboard=more_kb)

            if type(answer_text) == int:
                await bot.copy_message(callback_query.from_user.id, from_chat_id=callback_query.from_user.id,
                                       message_id=answer_text, reply_markup=upd_answer)
            else:
                await bot.send_message(callback_query.from_user.id,
                                       f"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {answer_text}",
                                       reply_markup=upd_answer)

            await bot.answer_callback_query(callback_query.id, "–ü—Ä–æ–ø—É—â–µ–Ω–æ\n–°–ª–µ–¥—É—é—â–∏–π –æ—Ç–≤–µ—Ç")
        else:
            await bot.send_message(callback_query.from_user.id, "–í—Å–µ –æ—Ç–≤–µ—Ç—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã.")

    @router.callback_query(lambda a: a.data.startswith('DeleteAnswer'))
    async def process_edit_answer_callback(callback_query: types.CallbackQuery):
        cont_1 = callback_query.data.split('_')[1]

        ans_id = int(cont_1)
        cur.execute("DELETE FROM Answers WHERE id = ?", (ans_id,))
        con.commit()
        cur.execute("Delete From AnswersVotes WHERE answer_id = ?", (ans_id,))
        con.commit()
        await bot.send_message(callback_query.from_user.id, "–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ")

    # —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞


# –≤—ã–≤–æ–¥ —Å–≤–æ–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫
@router.callback_query(lambda a: a.data == 'my_subscriptions')
async def get_my_subscriptions(callback_query: types.CallbackQuery):
    cur.execute(f"SELECT tags FROM Subscribes WHERE user = {callback_query.from_user.id}")
    my_subscriptions = cur.fetchall()

    tags = [tag[0] for tag in my_subscriptions]
    if len(tags) == 0:
        await bot.send_message(callback_query.from_user.id, "–í—ã –Ω–∏ –Ω–∞ —á—Ç–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã")
    else:
        await bot.send_message(callback_query.from_user.id, "–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏:")
        for tag in tags:
            unsub_keyboard = types.InlineKeyboardMarkup(
                inline_keyboard=[[types.InlineKeyboardButton(text="–û—Ç–ø–∏—Å–∞—Ç—å—Å—è",
                                                             callback_data=f"unsub_{tag}")]])
            await bot.send_message(callback_query.from_user.id, f"#{tag}", reply_markup=unsub_keyboard)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏
@router.callback_query(lambda a: a.data.startswith('unsub_'))
async def unsub_hashtag(callback_query: types.CallbackQuery):
    hashtag = callback_query.data.split('_')[1]
    cur.execute(f"DELETE FROM Subscribes WHERE user = {callback_query.from_user.id} AND tags = '{hashtag}'")
    con.commit()

    await callback_query.answer(f"–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ç–µ–≥–∞ #{hashtag}")


@router.callback_query(F.data == 'DeleteDB')
async def send_locate(callback_query: types.CallbackQuery, state: FSMContext):
    mell_gif = types.FSInputFile('images/plakiplaki.gif', 'rb')

    await bot.send_message(callback_query.from_user.id, "<b>–ó—Ä—è...</b>\n"
                                                        "–ó–∞ —Ç–æ–±–æ–π —É–∂–µ –≤—ã–µ—Ö–∞–ª–∏", parse_mode='HTML')
    await bot.send_location(callback_query.from_user.id, latitude=55.708902, longitude=37.721058)
    await bot.send_video(callback_query.from_user.id, mell_gif)


@router.callback_query(F.data == 'DeleteProfile')
async def delete_profile(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, f"üîì –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –≤–≤–µ–¥–∏—Ç–µ: {callback_query.from_user.id}")
    await state.set_state(RasStates.waiting_for_delete)


@router.message(RasStates.waiting_for_delete)
async def process_delete(message: types.Message, state: FSMContext):
    mes = message.text

    if mes.isdigit() and int(mes) == message.from_user.id:
        cur.execute(f"SELECT ID FROM Instructions WHERE author_id = {mes}")
        rows = cur.fetchall()
        cur.execute(f"SELECT ID FROM Answers WHERE author = {mes}")
        ans = cur.fetchall()
        for row in rows:
            instruction_id = row[0]

            cur.execute(f"Delete  FROM InstructionsVotes WHERE instruction_id = {instruction_id}")
            cur.execute(f"Delete  FROM Instructions WHERE author_id = {mes}")  # –£–î–ê–õ–ï–ù–ò –∏–∑ —Ç–∞–±–ª —Å –≥–æ–ª–æ—Å–∞–º–∏ –∑–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏

        for an in ans:
            instruction_id = an[0]

            cur.execute(f"Delete  FROM AnswersVotes WHERE answer_id = {instruction_id}")

            cur.execute(f"Delete  FROM Answers WHERE author = {mes}")  # –£–î–ê–õ–ï–ù–ò –∏–∑ —Ç–∞–±–ª —Å –≥–æ–ª–æ—Å–∞–º–∏ –∑–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏

        cur.execute(f"Delete  FROM Users Where user_id = {mes}")
        con.commit()
        await bot.send_message(message.from_user.id,"–ù–∞–¥–µ—é—Å—å –≤—ã –≤–µ—Ä–Ω–µ—Ç–µ—Å—åüò¢ \n –ï—Å–ª–∏ –≤—ã –≤–Ω–æ–≤—å –∑–∞—Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è "
                                                    "–±–æ—Ç–æ–º, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ /start")
    else:
        await bot.send_message(message.from_user.id, "–í–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç, —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

        await state.clear()


@router.callback_query(lambda a: a.data == 'ofonnotifs')
async def check_notifs(callback_query: types.CallbackQuery):
    cur.execute(f"SELECT notifications from Users WHERE user_id = {callback_query.from_user.id}")
    res = cur.fetchone()[0]

    if res == 0:
        # –≤–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        cur.execute(f"UPDATE Users SET notifications = 1 WHERE user_id = {callback_query.from_user.id}")
        con.commit()
        await callback_query.answer("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã")
    elif res == 1:
        # –≤—ã–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        cur.execute(f"UPDATE Users SET notifications = 0 WHERE user_id = {callback_query.from_user.id}")
        con.commit()
        await callback_query.answer("üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã")