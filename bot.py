import ast
import logging
import asyncio
import json
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.filters import CommandStart
from config import TOKEN
import keyboard as kb
from states import *
import sqlite3
import functions as f
import admin, answers_handlers, instructions_handlers, menu_handlers, profile_handlers, subscriptions_handlers
import random
from captcha.image import ImageCaptcha
import os


# –ø–æ–ª–ª–∏–Ω–≥
async def main():
    # –ø–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
    dp.include_router(admin.router)
    dp.include_router(answers_handlers.router)
    dp.include_router(instructions_handlers.router)
    dp.include_router(menu_handlers.router)
    dp.include_router(profile_handlers.router)
    dp.include_router(subscriptions_handlers.router)


    # –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥
    loop = asyncio.get_event_loop()
    loop.create_task(on_startup(dp))
    await bot.delete_webhook(drop_pending_updates=True)  # –ø—Ä–æ–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    await dp.start_polling(bot)


async def on_startup(dp):
    asyncio.create_task(f.send_notifications(cur, con, bot))


# –±–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
con = sqlite3.connect(r'bot_database.db')
cur = con.cursor()
f.create_database(cur)

# cur.execute("Delete From InstructionsVotes")
# con.commit()
# cur.execute("Delete From Instructions")
# con.commit()
# cur.execute("Delete From Answers")
# con.commit()
# cur.execute("Delete From Users")
# con.commit()
# cur.execute("Delete From Subscribes")
# con.commit()

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç ImageCaptcha
captcha_generator = ImageCaptcha(width=200, height=100)
correct_captchas = {}


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—Ç–∞
@dp.message(CommandStart())
async def start_command(message: types.Message, state: FSMContext):
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
    cur.execute(f"SELECT EXISTS (SELECT user_id FROM Users WHERE user_id = {message.from_user.id})")
    in_base_res = cur.fetchone()[0]

    if in_base_res == 0:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞–ø—á—É
        image_data, captcha_code = f.generate_captcha()
        correct_captchas[message.from_user.id] = captcha_code
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–ø—á–∏
        captcha_file = f'images/{captcha_code}.png'
        with open(captcha_file, 'wb') as ff:
            ff.write(image_data.read())
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–ø—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        with open(captcha_file, 'rb'):
            file_to_send = types.FSInputFile(captcha_file)
            await message.answer_photo(file_to_send, caption="üîê –í–≤–µ–¥–∏—Ç–µ –∫–∞–ø—á—É:")
            await state.set_state(EnterCapthca.entering_captcha)
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(captcha_file)

        @dp.message(EnterCapthca.entering_captcha)
        async def check_captcha(message: types.Message, state: FSMContext):
            # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–∞–ø—á—É
            user_input = message.text.strip()
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∫–∞–ø—á—É –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            correct_captcha = correct_captchas.get(message.from_user.id)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–∞–ø—á–∏
            if user_input == correct_captcha:
                await message.answer("‚úÖ –ö–∞–ø—á–∞ –≤–≤–µ–¥–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
                # –û—á–∏—â–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∫–∞–ø—á—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                del correct_captchas[message.from_user.id]
                putin_gif = types.FSInputFile('images/putin.gif')
                await bot.send_video(message.from_user.id, putin_gif)
                await state.clear()
                await message.reply(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name} üôã‚Äç‚ôÇÔ∏è! –Ø —Ç–≤–æ–π –Ω–æ–≤—ã–π <i>—á–∞—Ç-–±–æ—Ç</i>. "
                                    "–ú–µ–Ω—è —Å–æ–∑–¥–∞–ª–∏, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤ –∏–∑—É—á–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∏ —Å–æ–≤–µ—Ç–æ–≤ "
                                    "–ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ "
                                    "—Å –∫–æ–º—Ñ–æ—Ä—Ç–æ–º. –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º!üòâ", parse_mode='HTML',
                                    reply_markup=kb.kb_keyboard)

                f.add_user(message.from_user.id, 0, 0, 1, cur, con)
                await bot.send_message(message.from_user.id, f"üóÉ –ú–µ–Ω—é:", reply_markup=kb.menu_keyboard)
            else:
                await message.reply("‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                print(correct_captchas)
    elif in_base_res == 1:
        await bot.send_message(message.from_user.id, f"üóÉ –ú–µ–Ω—é:", reply_markup=kb.menu_keyboard)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)  # –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    asyncio.run(main())
