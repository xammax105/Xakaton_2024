from aiogram import Bot, Router, types, F
import keyboard as kb
from states import *
import sqlite3
import os
import logging
from config import TOKEN, admin_num
import functions as f

# –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
con = sqlite3.connect(r'bot_database.db')
cur = con.cursor()

# —Ä–æ—É—Ç–µ—Ä
router = Router()
bot = Bot(token=TOKEN)


@router.message(F.text.lower() == '–≤—ã–π—Ç–∏')
async def leave(message: types.Message):
    await bot.send_message(message.from_user.id, "üìÑ –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª. –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç:",
                           reply_markup=kb.kb_keyboard)


@router.message(F.text.lower() == '—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞')
async def administr(message: types.Message, state: FSMContext):
    men_kb = [

        [
            types.InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å', callback_data='AddAdmin'),
            types.InlineKeyboardButton(text='‚ûñ –£–¥–∞–ª–∏—Ç—å', callback_data='deleteAdmin'),
        ]
    ]

    keyboard_ans = types.InlineKeyboardMarkup(inline_keyboard=men_kb,
                                              resize_keyboard=True,
                                              input_field_placeholder="–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–∞–≤–Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏"
                                              )

    await bot.send_message(message.chat.id, f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏",
                           reply_markup=keyboard_ans)


@router.callback_query(F.data == 'AddAdmin')
async def confirm_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id,
                           "‚úè –í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏")
    await state.set_state(RasStates.waiting_for_administr_new)


@router.message(RasStates.waiting_for_administr_new)
async def process_password(message: types.Message, state: FSMContext):
    text = message.text
    last_id = cur.execute('SELECT MAX (id) FROM Admins').fetchone()

    if last_id[0] is None:
        id = 1
    else:
        id = last_id[0] + 1
    if text.isdigit():
        user = await bot.get_chat(text)
        username = user.username
        cur.execute(f"INSERT INTO Admins (ID, user, password) VALUES ({id}, '{text}', '123')")
        con.commit()
        await bot.send_message(message.from_user.id, "‚úÖ –£—Å–ø–µ—à–Ω–æ")
    else:
        await bot.send_message(message.from_user.id, "‚ùå –í–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")


@router.callback_query(F.data == 'deleteAdmin')
async def confirm_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id,
                           "‚úè –í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏")
    await state.set_state(RasStates.waiting_for_administr_del)


@router.message(RasStates.waiting_for_administr_del)
async def process_password(message: types.Message, state: FSMContext):
    text = message.text
    if text.isdigit():
        last_id = cur.execute('SELECT MAX (id) FROM Admins').fetchone()

        if last_id[0] is None:
            id = 1
        else:
            id = last_id[0] + 1

        cur.execute(f"DELETE FROM Admins WHERE user = {text}")
        con.commit()
        await bot.send_message(message.from_user.id, "‚úÖ –£—Å–ø–µ—à–Ω–æ")
    else:
        await bot.send_message(message.from_user.id, "‚ùå –í–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")


@router.message(F.text.lower() == '—Ä–∞—Å—Å—ã–ª–∫–∞')
async def admin_ras(message: types.Message, state: FSMContext):
    await bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏üßê:')
    await state.set_state(RasStates.waiting_for_message)


@router.message(RasStates.waiting_for_message)
async def ras(message: types.Message, state: FSMContext):
    await bot.send_message(message.from_user.id, '–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!')
    await broadcast_message(f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {message.text}")
    await state.clear()


async def broadcast_message(message: types.Message):
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞.
    cur.execute("SELECT user_id FROM Users")
    user_ids = cur.fetchall()

    for user_id in user_ids:
        try:
            await bot.send_message(chat_id=user_id[0], text=message)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


def but():
    but = [
        [
            types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm"),
            types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
        ],
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=but)
    return keyboard


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤
@router.message(F.text.lower() == '–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏')
async def process_questions(message: types.Message):
    cur.execute("SELECT id, content, author_id FROM Instructions WHERE is_active = 0;")
    all_instructions = cur.fetchall()

    await bot.send_message(message.chat.id, f"Instruction ID")

    unique_contents = set()  # Set to store unique instruction contents

    for instruction in all_instructions:
        instruction_id, content, user_id = instruction

        if content.isdigit():  # Check if the content is a message ID (numeric value)
            message_id = int(content)

            if message_id:
                await bot.copy_message(message.chat.id, from_chat_id=user_id, message_id=message_id)

                await bot.send_message(message.chat.id, f"Instruction ID: {instruction_id}\n\n{content}",
                                       reply_markup=but())

            else:
                # Invalid message ID, handle as text instruction
                await process_text_instruction(instruction_id, content, unique_contents, message.chat.id)
        else:
            # Non-numeric content, handle as text instruction
            await process_text_instruction(instruction_id, content, unique_contents, message.chat.id)


async def process_text_instruction(instruction_id, content, unique_contents, chat_id):
    if content in unique_contents:
        cur.execute("DELETE FROM Instructions WHERE id = ?", (instruction_id,))
        con.commit()
        return

    unique_contents.add(content)
    await bot.send_message(chat_id, f"Instruction ID: {instruction_id}\n\n{content}", reply_markup=but())


def but():
    buttons = [
        types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm"),
        types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[buttons])
    return keyboard


@router.callback_query(F.data == 'confirm')
async def confirm_callback(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id, "confirm")
    message_text = callback_query.message.text
    instruction_id = int(message_text.split()[2])  # Extract the instruction id from the callback data

    # Update the instruction status in the database
    cur.execute("UPDATE Instructions SET is_active = 1 WHERE id = ?", (instruction_id,))
    con.commit()

    # Get the author_id and content of the instruction from the Instructions table
    cur.execute("SELECT author_id, content FROM Instructions WHERE id = ?", (instruction_id,))
    result = cur.fetchone()

    author_id = result[0]
    instruction_content = result[1]
    cur.execute("UPDATE Users Set instructions = instructions+1 WHERE user_id = ?", (author_id,))
    con.commit()

    # Check if the user has enabled notifications
    cur.execute("SELECT notifications FROM Users WHERE user_id = ?", (author_id,))
    user_notification_row = cur.fetchone()

    if user_notification_row is not None:
        user_notifications = user_notification_row[0]

        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∫–ª—é—á–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if user_notifications == 1:
            if author_id not in admin_num:
                if instruction_content.isdigit():
                    await bot.copy_message(chat_id=author_id, from_chat_id=author_id, message_id=instruction_content,
                                           caption="–í–∞—à–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –±—ã–ª–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞",
                                           reply_markup=kb.menu_keyboard)
                else:
                    await bot.send_message(author_id,
                                           f"–í–∞—à–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –±—ã–ª–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞\n–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {instruction_content}",
                                           reply_markup=kb.menu_keyboard)

    # –¥–æ–±–∞–≤–∏–º –ø–æ–≤—ã–Ω–µ—Å–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤–Ω–µ if
    con.commit()


@router.callback_query(F.data == 'cancel')
async def cancel_callback(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id, "–û—Ç–º–µ–Ω–∞")

    message_text = callback_query.message.text

    if message_text:
        instruction_id = int(message_text.split()[2])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è

        # –ü–æ–ª—É—á–∞–µ–º ID –∞–≤—Ç–æ—Ä–∞ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Instructions
        cur.execute("SELECT author_id, content FROM Instructions WHERE id = ?", (instruction_id,))
        result = cur.fetchone()

        if result:
            author_id = result[0]
            instruction_content = result[1]

            # –£–¥–∞–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            cur.execute("DELETE FROM Instructions WHERE id = ?", (instruction_id,))
            con.commit()
            if author_id not in admin_num:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—å—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, –≤–∫–ª—é—á–∞—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                await bot.send_message(author_id,
                                       f"–í–∞—à–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\nID –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {instruction_id}",
                                       reply_markup=kb.menu_keyboard)


@router.message(F.text == '–û—Ç–≤–µ—Ç—ã')
async def process_answers(message: types.Message):
    cur.execute("SELECT id,instruction_id, content, author FROM Answers WHERE is_active = 0;")
    all_instructions = cur.fetchall()

    unique_contents = set()  # Set to store unique instruction contents

    for instruction in all_instructions:
        ans_id, instruction_id, content, user_id = instruction

        message_id = None
        try:
            message_id = int(content)
            print(message_id, "559")
        except ValueError:
            pass

        if message_id:
            await bot.copy_message(message.chat.id, from_chat_id=user_id, message_id=message_id)
            await bot.send_message(message.chat.id, f"ID –û—Ç–≤–µ—Ç–∞ {ans_id} ID –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ {instruction_id}\n\n{content}",
                                   reply_markup=buts())
        else:
            # Handle as text instruction
            await process_text_answer(ans_id, instruction_id, content, unique_contents, message.chat.id)


async def process_text_answer(ans_id, instruction_id, content, unique_contents, chat_id):
    if content in unique_contents:
        cur.execute("DELETE FROM Answers WHERE id = ?", (ans_id,))
        con.commit()
        return

    unique_contents.add(content)

    await bot.send_message(chat_id, f"ID –û—Ç–≤–µ—Ç–∞ {ans_id} ID –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ {instruction_id}\n\n{content}",
                           reply_markup=buts())


def buts():
    buttons = [
        types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="yes"),
        types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="no")
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[buttons])
    return keyboard


@router.callback_query(F.data == 'yes')
async def confirma_callback(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id, "confirm")
    message_text = callback_query.message.text

    instruction_id = int(message_text.split()[5])

    ans_id = int(message_text.split()[2])
    print(instruction_id, "593")  # Extract the instruction id from the callback data

    # Update the instruction status in the database
    cur.execute("UPDATE Answers SET is_active = 1 WHERE id = ?", (ans_id,))
    con.commit()

    # Get the author_id and content of the instruction from the Instructions table
    cur.execute("SELECT author, content FROM Answers WHERE id = ?", (ans_id,))
    result = cur.fetchone()
    print(result, "–ß–µ—Ç–æ –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è")
    author_id = result[0]
    instruction_content = result[1]
    if author_id not in admin_num:
        if type(instruction_content) == int:

            await bot.copy_message(chat_id=author_id, from_chat_id=author_id, message_id=instruction_content,
                                   caption=f"‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –±—ã–ª –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.", reply_markup=kb.menu_keyboard)
        else:
            await bot.send_message(author_id,
                                   f"‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –±—ã–ª –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.\n–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞: {instruction_content}")

    # Find all users who have requested notifications for this instruction
    cur.execute("SELECT author_id FROM Instructions WHERE id = ?", (instruction_id,))
    users_to_notify = cur.fetchall()
    print(users_to_notify, '613')

    for user in users_to_notify:
        user_id = user[0]
        # —ç—Ç–æ –≤—Å—Ç–∞–≤–∏–ª –¥–ª—è –ø—Ä–æ–≤—Ä–∫–∏ —É–≤–µ–¥
        cur.execute("SELECT notifications FROM Users WHERE user_id = ?", (user_id,))
        user_notification_row = cur.fetchone()

        if user_notification_row is not None:
            user_notifications = user_notification_row[0]

            # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∫–ª—é—á–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            # –∫–æ–Ω–µ—Ü –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥

            if user_notifications == 1:
                print(user[0], '617')
                await bot.send_message(user_id,
                                       f"üöÄ –ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à—É –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é \n –ê–π–¥–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {instruction_id}")

    con.commit()


@router.callback_query(F.data == 'no')
async def cancela_callback(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id, "–û—Ç–º–µ–Ω–µ–Ω–æ")

    message_text = callback_query.message.text

    if message_text:
        instruction_id = int(message_text.split()[2])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è

        # –ü–æ–ª—É—á–∞–µ–º ID –∞–≤—Ç–æ—Ä–∞ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Instructions
        cur.execute("SELECT author, content FROM Answers WHERE id = ?", (instruction_id,))
        result = cur.fetchone()

        if result:
            author_id = result[0]
            instruction_content = result[1]

            # –£–¥–∞–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            cur.execute("DELETE FROM Answers WHERE id = ?", (instruction_id,))
            con.commit()
            if author_id not in admin_num:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—å—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, –≤–∫–ª—é—á–∞—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                await bot.send_message(author_id,
                                       f"‚ùå –í–∞—à–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n–ù–æ–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {instruction_id}",
                                       reply_markup=kb.menu_keyboard)
            else:
                await bot.send_message(author_id,
                                       f"‚ùå –í–∞—à–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n–ù–æ–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {instruction_id}")
